{"version":3,"sources":["styles/Comments.module.css","styles/CardItem.module.css","styles/SortBy.module.css","styles/Header.module.css","styles/Spinner.module.css","styles/CardList.module.css","types/ActionTypes.ts","store/actions.tsx","components/SortBy.tsx","components/Header.tsx","components/CardItemForm.tsx","utils/fetchJSON.ts","store/middleware.tsx","constants/endpoints.ts","components/CardListItem.tsx","UI/Spinner.tsx","store/selectors.tsx","components/CardList.tsx","screens/List.tsx","components/CommentItem.tsx","components/CommentEditor.tsx","utils/idGenerator.ts","components/Comments.tsx","components/CardItem.tsx","screens/Card.tsx","App.tsx","reportWebVitals.ts","store/reducer.tsx","store/store.tsx","index.tsx"],"names":["module","exports","ActionTypes","SortOptions","setLoading","param","type","LOADING","payload","setError","err","ERROR","Option","Select","connect","dispatch","sortBy","value","SORT_BY","className","classes","Container","onChange","defaultValue","AZ_ASC","showSearch","AZ_DESC","COUNT_ASC","COUNT_DESC","Header","isListView","title","subtitle","toggleModal","history","useHistory","backIcon","LeftOutlined","subTitle","extra","icon","PlusOutlined","onClick","goBack","layout","labelCol","span","wrapperCol","validateMessages","required","types","number","range","CardItemForm","props","initValues","updateProduct","name","onFinish","values","Object","keys","forEach","k","initialValues","Item","label","rules","style","marginBottom","display","width","marginRight","min","max","placeholder","offset","htmlType","fetchJSON","url","a","options","merge","headers","body","JSON","stringify","fetch","res","get","includes","json","status","Error","fetchApi","BASE_EP","Meta","Card","confirm","Modal","updateItem","removeItem","item","useState","isModalVisible","setIsModalVisible","cover","alt","src","imageUrl","actions","EllipsisOutlined","id","push","EditOutlined","DeleteOutlined","ExclamationCircleOutlined","okText","okType","cancelText","onOk","REMOVE_PRODUCT","method","onCancel","hoverable","visible","footer","UPDATE_PRODUCT","Spinner","size","getIsLoading","state","isLoading","getError","error","getProducts","products","getProduct","product","getSorted","getAllProducts","addNewItem","useEffect","GET_PRODUCTS","grid","gutter","xs","sm","md","lg","xl","xxl","dataSource","renderItem","count","ADD_PRODUCT","List","CommentItem","comment","removeComment","description","date","author","avatar","content","datetime","moment","format","fromNow","Comment","TextArea","Input","CommentEditor","onSubmit","submitting","rows","e","loading","idGenerator","S4","Math","random","toString","substring","setValue","comments","commentId","itemCopy","parse","newComments","filter","c","map","target","initComment","productId","getItem","useParams","GET_PRODUCT","Details","Desc","bordered","column","height","weight","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","store","createStore","action","p","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e2cb197.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Comments_Container__al520\",\"Comment\":\"Comments_Comment__1DD8F\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardItem_Container__141P4\",\"Details\":\"CardItem_Details__3d6lk\",\"Desc\":\"CardItem_Desc__11v3S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"SortBy_Container__3ZLg-\",\"Select\":\"SortBy_Select__1IxJS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__32fXJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Spinner_Container__rzVqv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"CardList_Container__r3JsM\"};","import { Action } from \"redux\";\r\nimport { Product } from \"./BaseItem\";\r\n\r\nexport interface LoadingAction extends Action {\r\n    type: ActionTypes.LOADING;\r\n    payload: boolean;\r\n}\r\n\r\nexport interface ErrorAction extends Action {\r\n    type: ActionTypes.ERROR;\r\n    payload: string;\r\n}\r\n\r\nexport interface SortByAction extends Action {\r\n    type: ActionTypes.SORT_BY;\r\n    payload: string;\r\n}\r\n\r\nexport interface AsyncAction extends Action {\r\n    type: AsyncActionType;\r\n}\r\n\r\nexport interface GetProductsAction extends AsyncAction {\r\n    payload: Product[];\r\n}\r\n\r\nexport interface GetProductAction extends AsyncAction {\r\n    payload: Product;\r\n}\r\n\r\nexport interface AddProductAction extends AsyncAction {\r\n    payload: Product;\r\n}\r\n\r\nexport interface UpdateProductAction extends AsyncAction {\r\n    payload: Product;\r\n}\r\n\r\nexport interface RemoveProductAction extends AsyncAction {\r\n    payload: string;\r\n}\r\n\r\n\r\nexport enum ActionTypes {\r\n    LOADING = \"LOADING\",\r\n    ERROR = \"ERROR\",\r\n    SORT_BY = \"SORT_BY\",\r\n    GET_PRODUCTS = \"GET_PRODUCTS\",\r\n    GET_PRODUCT = \"GET_PRODUCT\",\r\n    ADD_PRODUCT = \"ADD_PRODUCT\",\r\n    UPDATE_PRODUCT = \"UPDATE_PRODUCT\",\r\n    REMOVE_PRODUCT = \"REMOVE_PRODUCT\",\r\n}\r\n\r\nexport type AsyncActionType = ActionTypes.GET_PRODUCTS | ActionTypes.GET_PRODUCT | ActionTypes.ADD_PRODUCT | ActionTypes.REMOVE_PRODUCT | ActionTypes.UPDATE_PRODUCT;\r\nexport type KnownActions = GetProductsAction | GetProductAction | AddProductAction | UpdateProductAction | RemoveProductAction | SortByAction | ErrorAction | LoadingAction;","import { ActionTypes, ErrorAction, LoadingAction, SortByAction } from \"../types/ActionTypes\";\r\n\r\nexport const setLoading: (param: boolean) => LoadingAction = (param: boolean) => (\r\n    {\r\n        type: ActionTypes.LOADING,\r\n        payload: param\r\n    }\r\n);\r\n\r\nexport const setError: (err: any) => ErrorAction = (err: any) => (\r\n    {\r\n        type: ActionTypes.ERROR,\r\n        payload: err\r\n    }\r\n);\r\n\r\nexport const sortBy: (param: string) => SortByAction = (param: string) => (\r\n    {\r\n        type: ActionTypes.SORT_BY,\r\n        payload: param\r\n    }\r\n);","import { FC } from \"react\";\r\nimport { Select } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { AppDispatch } from \"../store/store\";\r\n\r\nimport { sortBy } from \"../store/actions\";\r\nimport classes from \"../styles/SortBy.module.css\";\r\n\r\nexport enum SortOptions {\r\n    AZ_ASC = \"?_sort=name&_order=asc\",\r\n    AZ_DESC = \"?_sort=name&_order=desc\",\r\n    COUNT_ASC = \"?_sort=count&_order=asc\",\r\n    COUNT_DESC = \"?_sort=count&_order=desc\",\r\n}\r\n\r\nconst { Option } = Select;\r\n\r\nconst SortBy: FC<CardListDispatchProps> = ({ sortBy }) => {\r\n    const handleChange = (value: SortOptions) => {\r\n        sortBy(value);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Container}>\r\n            <span>sort by:</span>\r\n            <Select\r\n                className={classes.Select}\r\n                onChange={handleChange}\r\n                defaultValue={SortOptions.AZ_ASC}\r\n                showSearch={false}>\r\n                <Option value={SortOptions.AZ_ASC}>a-z</Option>\r\n                <Option value={SortOptions.AZ_DESC}>z-a</Option>\r\n                <Option value={SortOptions.COUNT_ASC}>count asc</Option>\r\n                <Option value={SortOptions.COUNT_DESC}>count desc</Option>\r\n            </Select>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        sortBy: (value: string) => dispatch(sortBy(value)),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(SortBy);\r\n\r\n\r\ninterface CardListDispatchProps {\r\n    sortBy: (value: string) => void;\r\n}","import { FC } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, PageHeader } from 'antd';\r\nimport { LeftOutlined, PlusOutlined } from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\n\r\nimport SortBy from './SortBy';\r\nimport classes from '../styles/Header.module.css';\r\n\r\nexport const Header: FC<HeaderOwnProps> = ({ isListView, title, subtitle, toggleModal }) => {\r\n    let history = useHistory();\r\n\r\n    const goBack = () => history.goBack();\r\n\r\n    return (\r\n        <PageHeader\r\n            backIcon={<LeftOutlined />}\r\n            className={classes.Header}\r\n            title={title}\r\n            subTitle={subtitle}\r\n            extra={\r\n                isListView\r\n                ? [\r\n                    <SortBy />,\r\n                    <Button\r\n                        key=\"1\"\r\n                        icon={<PlusOutlined />}\r\n                        onClick={() => toggleModal!(true)} />\r\n                ]\r\n                : <Button\r\n                    key=\"1\"\r\n                    icon={<LeftOutlined />}\r\n                    onClick={goBack} />\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\n\r\ninterface HeaderOwnProps {\r\n    isListView?: boolean;\r\n    title: string;\r\n    subtitle?: string;\r\n    toggleModal?: (isVisible: boolean) => void;\r\n}","import { FC } from \"react\";\r\nimport { Button, Form, Input, InputNumber } from \"antd\";\r\n\r\nimport { Product } from \"../types/BaseItem\";\r\n\r\nconst layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n};\r\n\r\nconst validateMessages = {\r\n    // eslint-disable-next-line no-template-curly-in-string\r\n    required: \"${label} is required!\",\r\n    types: {\r\n        // eslint-disable-next-line no-template-curly-in-string\r\n        number: \"${label} is not a valid number!\",\r\n    },\r\n    number: {\r\n        // eslint-disable-next-line no-template-curly-in-string\r\n        range: \"${label} must be between ${min} and ${max}\",\r\n    },\r\n};\r\n\r\nexport const CardItemForm: FC<ItemFormOwnProps> = (props) => {\r\n    const { initValues, toggleModal, updateProduct } = props;\r\n    \r\n    const onAddBtn = (values: any) => {\r\n        Object.keys(values).forEach(k => {\r\n            (initValues as any)[k] = values[k];\r\n        });\r\n\r\n        toggleModal(false);\r\n        updateProduct(initValues);\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            name=\"nest-messages\"\r\n            onFinish={onAddBtn}\r\n            initialValues={initValues}\r\n            validateMessages={validateMessages}>\r\n            <Form.Item name={\"imageUrl\"} label=\"Image URL\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name={\"name\"} label=\"Name\" rules={[{ required: true }]}>\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item name={\"weight\"} label=\"Weight\">\r\n                <Input />\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Size\"\r\n                style={{ marginBottom: \"0\" }}>\r\n                <Form.Item\r\n                    name={[\"size\", \"width\"]}\r\n                    style={{ display: \"inline-block\", width: \"25%\", marginRight: \"24px\" }}\r\n                    rules={[{ type: \"number\", min: 0, max: 1000 }]}>\r\n                    <InputNumber placeholder=\"width\" />\r\n                </Form.Item>\r\n                <Form.Item\r\n                    name={[\"size\", \"height\"]}\r\n                    style={{ display: \"inline-block\", width: \"25%\" }}\r\n                    rules={[{ type: \"number\", min: 0, max: 1000 }]}>\r\n                    <InputNumber placeholder=\"height\" />\r\n                </Form.Item>\r\n            </Form.Item>\r\n            <Form.Item\r\n                name={\"count\"}\r\n                label=\"Count\"\r\n                rules={[{ type: \"number\", min: 0, max: 99 }]}\r\n                style={{ marginBottom: \"32px\" }}>\r\n                <InputNumber />\r\n            </Form.Item>\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Add\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n}\r\n\r\n\r\ninterface ItemFormOwnProps {\r\n    initValues: Product;\r\n    toggleModal: (isVisible: boolean) => void;\r\n    updateProduct: (values: Product) => void;\r\n}","import { merge } from \"lodash\";\r\n\r\n// Fetch JSON\r\nexport const fetchJSON = async (url: string, options = {}) => {\r\n    options = merge(options, {\r\n        headers: {\r\n            \"Accept\": \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify((options as Options).body)\r\n    })\r\n\r\n    let res = await fetch(url, options)\r\n\r\n    if ((res.headers.get(\"Content-Type\") || \"\").includes(\"application/json\")) {\r\n        try {\r\n            return {\r\n                body: await res.json(),\r\n                status: res.status\r\n            }\r\n        } catch (e) {\r\n            // Bad JSON\r\n            throw new Error(`Status: ${res.status}, Message: Bad JSON`)\r\n        }\r\n    } else {\r\n        // Bad Content-type\r\n        throw new Error(`Status: ${res.status}, Message: Incorrect MIME type`);\r\n    }\r\n}\r\n\r\n\r\ninterface Options {\r\n    headers: Headers,\r\n    body: JSON\r\n}\r\n\r\ninterface Headers {\r\n    \"Accept\": \"application/json\";\r\n    \"Content-Type\": \"application/json\";\r\n}","import { ThunkAction } from \"redux-thunk\";\r\n\r\nimport { setError, setLoading } from \"./actions\";\r\nimport { AsyncActionType, KnownActions } from \"../types/ActionTypes\";\r\nimport { fetchJSON } from \"../utils/fetchJSON\";\r\nimport { AppState } from \"./store\";\r\n\r\nexport const fetchApi = (type: AsyncActionType, url: string, options = {}, payload?: any)\r\n: ThunkAction<Promise<void>, {}, AppState, KnownActions> =>\r\n    async (dispatch) => {\r\n        dispatch(setLoading(true));\r\n\r\n        try {\r\n            const res = await fetchJSON(url, options);\r\n            \r\n            dispatch({ type: type, payload: payload ? payload : res.body });\r\n        } catch (err: any) {\r\n            dispatch(setError(err));\r\n        } finally {\r\n            dispatch(setLoading(false));\r\n        }\r\n}","// export const BASE_EP = \"http://localhost:8000/products\";\r\nexport const BASE_EP = \"https://my-json-server.typicode.com/boobzzz/json-server-db/products\";","import { FC, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { Card, Modal } from \"antd\";\r\nimport { EditOutlined, EllipsisOutlined, DeleteOutlined, ExclamationCircleOutlined } from \"@ant-design/icons\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport { CardItemForm } from \"./CardItemForm\";\r\nimport { AppDispatch } from \"../store/store\";\r\nimport { fetchApi } from \"../store/middleware\";\r\nimport { ActionTypes, AsyncActionType } from \"../types/ActionTypes\";\r\nimport { Product } from \"../types/BaseItem\";\r\nimport { BASE_EP } from \"../constants/endpoints\";\r\n\r\nconst { Meta } = Card;\r\nconst { confirm } = Modal;\r\n\r\nconst CardListItem: FC<CardItemDispatchProps & CardItemOwnProps> = ({ item, updateItem, removeItem }) => {\r\n    const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\r\n\r\n    const handleCancel = () => {\r\n        setIsModalVisible(false);\r\n    }\r\n\r\n    const updateProduct = (values: Product) => {\r\n        const options = {\r\n            method: \"PUT\",\r\n            body: values,\r\n        }\r\n        \r\n        updateItem(ActionTypes.UPDATE_PRODUCT, `${BASE_EP}/${item.id}`, options);\r\n    }\r\n\r\n    const removeProduct = () => {\r\n        const options = {\r\n            method: \"DELETE\",\r\n        }\r\n\r\n        removeItem(ActionTypes.REMOVE_PRODUCT, `${BASE_EP}/${item.id}`, options, item.id!);\r\n    }\r\n\r\n    const showDeleteConfirm = () => {\r\n        confirm({\r\n            title: \"Are you sure you want to delete this item?\",\r\n            icon: <ExclamationCircleOutlined />,\r\n            okText: \"Yes\",\r\n            okType: \"danger\",\r\n            cancelText: \"No\",\r\n            onOk() {removeProduct()},\r\n            onCancel() {},\r\n        });\r\n    }\r\n\r\n    let history = useHistory();\r\n\r\n    const redirect = (id: string, name: string) => {\r\n        history.push(`/products/${id}/${name}`);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Card\r\n                cover={<img alt=\"example\" src={item.imageUrl} />}\r\n                actions={[\r\n                    <EllipsisOutlined key=\"ellipsis\" onClick={() => redirect(item.id, item.name)} />,\r\n                    <EditOutlined key=\"edit\" onClick={() => setIsModalVisible(true)} />,\r\n                    <DeleteOutlined key=\"delete\" onClick={showDeleteConfirm} />,\r\n                ]}\r\n                hoverable\r\n            >\r\n                <Meta title={item.name} />\r\n            </Card>\r\n            <Modal\r\n                title=\"Edit Product\"\r\n                visible={isModalVisible}\r\n                onCancel={handleCancel}\r\n                footer={null}\r\n            >\r\n                <CardItemForm\r\n                    initValues={item}\r\n                    toggleModal={setIsModalVisible}\r\n                    updateProduct={updateProduct} />\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        updateItem: (type: AsyncActionType, url: string, options: {}) =>\r\n            dispatch(fetchApi(type, url, options)\r\n        ),\r\n        removeItem: (type: AsyncActionType, url: string, options: {}, payload: string) =>\r\n            dispatch(fetchApi(type, url, options, payload)\r\n        ),\r\n    }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(CardListItem);\r\n\r\n\r\ninterface CardItemDispatchProps {\r\n    updateItem: (type: AsyncActionType, url: string, options: {}) => Promise<void>;\r\n    removeItem: (type: AsyncActionType, url: string, options: {}, payload: string) => Promise<void>;\r\n}\r\n\r\ninterface CardItemOwnProps {\r\n    item: Product;\r\n}","import { FC } from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nimport classes from \"../styles/Spinner.module.css\";\r\n\r\nexport const Spinner: FC = () => {\r\n    return (\r\n        <div className={classes.Container}>\r\n            <Spin size=\"large\" />\r\n        </div>\r\n    );\r\n}","import { AppState } from \"./store\";\r\n\r\nexport const getIsLoading = (state: AppState) => state.isLoading;\r\nexport const getError = (state: AppState) => state.error;\r\nexport const getProducts = (state: AppState) => state.products;\r\nexport const getProduct = (state: AppState) => state.product;\r\nexport const getSorted = (state: AppState) => state.sortBy;","import { FC, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { List, Modal } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\n\r\nimport CardListItem from \"./CardListItem\";\r\nimport { CardItemForm } from \"./CardItemForm\";\r\nimport { Spinner } from \"../UI/Spinner\";\r\nimport { getError, getIsLoading, getProducts, getSorted } from \"../store/selectors\";\r\nimport { AppDispatch, AppState } from \"../store/store\";\r\nimport { fetchApi } from \"../store/middleware\";\r\nimport { ActionTypes, AsyncActionType } from \"../types/ActionTypes\";\r\nimport { Product } from \"../types/BaseItem\";\r\nimport { BASE_EP } from \"../constants/endpoints\";\r\nimport classes from \"../styles/CardList.module.css\";\r\n\r\nconst CardList: FC<CardListStateProps & CardListDispatchProps & CardListOwnProps> = (props) => {\r\n    const {\r\n        isLoading,\r\n        error,\r\n        products,\r\n        sortBy,\r\n        isModalVisible,\r\n        getAllProducts,\r\n        toggleModal,\r\n        addNewItem\r\n    } = props;\r\n    const initProd: Product = {\r\n        id: \"\",\r\n        imageUrl: \"\",\r\n        name: \"\",\r\n        count: 0,\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        toggleModal(false);\r\n    }\r\n\r\n    const addNewProduct = (values: Product) => {\r\n        const options = {\r\n            method: \"POST\",\r\n            body: values\r\n        };\r\n\r\n        addNewItem(ActionTypes.ADD_PRODUCT, BASE_EP, options);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAllProducts(ActionTypes.GET_PRODUCTS, `${BASE_EP}${sortBy}`);\r\n    }, [getAllProducts, sortBy]);\r\n\r\n    if (isLoading) return <Spinner />\r\n\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <>\r\n            <div className={classes.Container}>\r\n                <List\r\n                    grid={{\r\n                        gutter: 16,\r\n                        xs: 1,\r\n                        sm: 2,\r\n                        md: 4,\r\n                        lg: 4,\r\n                        xl: 6,\r\n                        xxl: 4,\r\n                    }}\r\n                    dataSource={products}\r\n                    renderItem={(item: Product) => (\r\n                        <List.Item key={item.id}>\r\n                            <CardListItem item={item} />\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n            </div>\r\n            <Modal\r\n                title=\"New Product\"\r\n                visible={isModalVisible}\r\n                onCancel={handleCancel}\r\n                footer={null}\r\n            >\r\n                <CardItemForm\r\n                    initValues={initProd}\r\n                    toggleModal={toggleModal}\r\n                    updateProduct={addNewProduct} />\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        isLoading: getIsLoading(state),\r\n        error: getError(state),\r\n        products: getProducts(state),\r\n        sortBy: getSorted(state),\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        getAllProducts: (type: AsyncActionType, url: string) => dispatch(fetchApi(type, url)),\r\n        addNewItem: (type: AsyncActionType, url: string, options: {}) =>\r\n            dispatch(fetchApi(type, url, options)\r\n        ),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardList);\r\n\r\n\r\ninterface CardListStateProps {\r\n    isLoading: boolean;\r\n    error: string;\r\n    products: Product[];\r\n    sortBy: string;\r\n}\r\n\r\ninterface CardListDispatchProps {\r\n    getAllProducts: (type: AsyncActionType, url: string) => Promise<void>;\r\n    addNewItem: (type: AsyncActionType, url: string, options: {}) => Promise<void>;\r\n}\r\n\r\ninterface CardListOwnProps {\r\n    isModalVisible: boolean;\r\n    toggleModal: (isVisible: boolean) => void;\r\n}","import { FC, useState } from \"react\";\r\n\r\nimport { Header } from \"../components/Header\";\r\nimport CardList from \"../components/CardList\";\r\n\r\nexport const List: FC = () => {\r\n    const [isModalVisible, setIsModalVisible] = useState<boolean>(false);\r\n\r\n    return (\r\n        <>\r\n            <Header\r\n                title=\"Products\"\r\n                subtitle=\"List of available products\"\r\n                toggleModal={setIsModalVisible}\r\n                isListView />\r\n            <CardList isModalVisible={isModalVisible} toggleModal={setIsModalVisible} />\r\n        </>\r\n    );\r\n}","import { FC } from \"react\";\r\nimport { Comment, Tooltip, Avatar } from \"antd\";\r\nimport moment from \"moment\";\r\n\r\nimport { Comment as ItemComment } from \"../types/BaseItem\";\r\nimport classes from \"../styles/Comments.module.css\";\r\n\r\nexport const CommentItem: FC<CommentItemOwnProps> = ({ comment, removeComment }) => {\r\n    const { id, description, date } = comment;\r\n\r\n    return (\r\n        <Comment\r\n            actions={[\r\n                <span\r\n                    key=\"del-comment\"\r\n                    onClick={() => removeComment(id)}>\r\n                    Delete\r\n                </span>\r\n            ]}\r\n            // eslint-disable-next-line jsx-a11y/anchor-is-valid\r\n            author={<a>Han Solo</a>}\r\n            avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" alt=\"Han Solo\" />}\r\n            content={description}\r\n            datetime={\r\n                <Tooltip title={moment().format(\"HH:mm DD.MM.YYYY\")}>\r\n                    <span>{moment(date, \"HH:mm DD.MM.YYYY\").fromNow()}</span>\r\n                </Tooltip>\r\n            }\r\n            className={classes.Comment}\r\n        />\r\n    );\r\n}\r\n\r\n\r\ninterface CommentItemOwnProps {\r\n    comment: ItemComment;\r\n    removeComment: (id: string) => void;\r\n}","import { ChangeEvent, FC } from \"react\";\r\nimport { Avatar, Button, Comment, Form, Input  } from \"antd\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nexport const CommentEditor: FC<CommentEditorOwnProps> = (props) => {\r\n    const { onChange, onSubmit, submitting, value } = props;\r\n\r\n    return (\r\n        <Comment\r\n            avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" alt=\"Han Solo\" />}\r\n            content={\r\n                <>\r\n                    <Form.Item>\r\n                        <TextArea\r\n                            rows={4}\r\n                            onChange={(e) => onChange(e)}\r\n                            value={value}\r\n                        />\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button\r\n                            htmlType=\"submit\"\r\n                            loading={submitting}\r\n                            onClick={onSubmit}\r\n                            type=\"primary\"\r\n                        >\r\n                            Add Comment\r\n                        </Button>\r\n                    </Form.Item>\r\n                </>\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\n\r\ninterface CommentEditorOwnProps {\r\n    onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void;\r\n    onSubmit: () => void;\r\n    submitting: boolean;\r\n    value: string;\r\n}","export const idGenerator = () => {\r\n    const S4 = () => {\r\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n\r\n    return S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4();\r\n}","import { ChangeEvent, FC, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\n\r\nimport { CommentItem } from \"./CommentItem\";\r\nimport { CommentEditor } from \"./CommentEditor\";\r\nimport { Comment, Product } from \"../types/BaseItem\";\r\nimport { ActionTypes, AsyncActionType } from \"../types/ActionTypes\";\r\nimport { AppDispatch, AppState } from \"../store/store\";\r\nimport { getIsLoading } from \"../store/selectors\";\r\nimport { fetchApi } from \"../store/middleware\";\r\nimport { BASE_EP } from \"../constants/endpoints\";\r\nimport { idGenerator } from \"../utils/idGenerator\";\r\nimport classes from \"../styles/Comments.module.css\";\r\n\r\nconst Comments: FC<CommentsStateToProps & CommentsDispatchToProps & CommentsOwnProps> =\r\n({ isLoading, item, updateItem }) => {\r\n    const [value, setValue] = useState<string>(\"\");\r\n\r\n    const { id, comments } = item;\r\n\r\n    const handleChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.target.value);\r\n    }\r\n\r\n    const updateProduct = (item: Product) => {\r\n        const options = {\r\n            method: \"PUT\",\r\n            body: item,\r\n        }\r\n\r\n        updateItem(ActionTypes.UPDATE_PRODUCT, `${BASE_EP}/${id}`, options);\r\n    }\r\n\r\n    const addNewComment = () => {\r\n        const itemCopy = JSON.parse(JSON.stringify(item));\r\n        const initComment: Comment = {\r\n            id: idGenerator(),\r\n            productId: id,\r\n            description: value,\r\n            date: moment().format(\"HH:mm DD.MM.YYYY\")\r\n        };\r\n\r\n        if (!itemCopy.comments) itemCopy.comments = [];\r\n\r\n        itemCopy.comments.push(initComment);\r\n\r\n        updateProduct(itemCopy);\r\n    }\r\n\r\n    const removeComment = (commentId: string) => {\r\n        const itemCopy = JSON.parse(JSON.stringify(item));\r\n        const newComments = (itemCopy as Product).comments!.filter(c => c.id !== commentId);\r\n\r\n        itemCopy[\"comments\"] = newComments;\r\n        \r\n        updateProduct(itemCopy);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Container}>\r\n            <h3>Comments:</h3>\r\n            <ul>\r\n                {comments?.map(c =>\r\n                    <li key={c.id}>\r\n                        <CommentItem comment={c} removeComment={removeComment} />\r\n                    </li>\r\n                )}\r\n            </ul>\r\n            <CommentEditor\r\n                onChange={handleChange}\r\n                onSubmit={addNewComment}\r\n                submitting={isLoading}\r\n                value={value}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        isLoading: getIsLoading(state),\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        updateItem: (type: AsyncActionType, url: string, options: {}) =>\r\n            dispatch(fetchApi(type, url, options)\r\n        ),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Comments);\r\n\r\n\r\ninterface CommentsStateToProps {\r\n    isLoading: boolean;\r\n}\r\n\r\ninterface CommentsDispatchToProps {\r\n    updateItem: (type: AsyncActionType, url: string, options: {}) => Promise<void>;\r\n}\r\n\r\ninterface CommentsOwnProps {\r\n    item: Product;\r\n}","import { FC, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Descriptions, Image } from \"antd\";\r\n\r\nimport Comments from \"./Comments\";\r\nimport { Spinner } from \"../UI/Spinner\";\r\nimport { fetchApi } from \"../store/middleware\";\r\nimport { AppDispatch, AppState } from \"../store/store\";\r\nimport { RouteParams } from \"../App\";\r\nimport { getError, getIsLoading, getProduct } from \"../store/selectors\";\r\nimport { ActionTypes, AsyncActionType } from \"../types/ActionTypes\";\r\nimport { Product } from \"../types/BaseItem\";\r\nimport { BASE_EP } from \"../constants/endpoints\";\r\nimport classes from \"../styles/CardItem.module.css\";\r\n\r\nconst CardItem: FC<CardItemStateProps & CardItemDispatchProps> = (props) => {\r\n    let { id } = useParams<RouteParams>();\r\n    const { isLoading, error, product, getItem } = props;\r\n\r\n    useEffect(() => {\r\n        getItem(ActionTypes.GET_PRODUCT, `${BASE_EP}?id=${id}`)\r\n    }, [getItem, id])\r\n\r\n    if (isLoading) return <Spinner />\r\n\r\n    if (error) return <div>{error}</div>;\r\n\r\n    return (\r\n        <div className={classes.Container}>\r\n            <div className={classes.Details}>\r\n                <div className={classes.Desc}>\r\n                    <div>\r\n                        <h3>Details</h3>\r\n                        <p>Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore, velit omnis soluta veniam placeat consequuntur iure harum! Accusantium, nam quos dignissimos sapiente assumenda fugit quo omnis cumque, a officia eveniet? Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore, velit omnis soluta veniam placeat consequuntur iure harum! Accusantium, nam quos dignissimos sapiente assumenda fugit quo omnis cumque, a officia eveniet? Lorem ipsum dolor sit, amet consectetur adipisicing elit. Dolore, velit omnis soluta veniam placeat consequuntur iure harum! Accusantium, nam quos dignissimos sapiente assumenda fugit quo omnis cumque, a officia eveniet?</p>\r\n                    </div>\r\n                    <Descriptions\r\n                        layout=\"vertical\"\r\n                        bordered\r\n                        column={{ xxl: 4, xl: 3, lg: 3, md: 3, sm: 2, xs: 1 }}\r\n                        size=\"small\"\r\n                    >\r\n                        <Descriptions.Item label=\"ID\">{product.id}</Descriptions.Item>\r\n                        <Descriptions.Item label=\"Name\">{product.name}</Descriptions.Item>\r\n                        <Descriptions.Item label=\"Amount\">{product.count}</Descriptions.Item>\r\n                        <Descriptions.Item label=\"Size\">\r\n                            width: {product.size?.width}\r\n                            <br />\r\n                            height: {product.size?.height}\r\n                        </Descriptions.Item>\r\n                        <Descriptions.Item label=\"Weight\">{product.weight}</Descriptions.Item>\r\n                    </Descriptions>\r\n                </div>\r\n                <Image src={product.imageUrl} width={325} height={425} />\r\n            </div>\r\n            <Comments item={product} />\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        isLoading: getIsLoading(state),\r\n        error: getError(state),\r\n        product: getProduct(state),\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: AppDispatch) => {\r\n    return {\r\n        getItem: (type: AsyncActionType, url: string) => dispatch(fetchApi(type, url)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CardItem);\r\n\r\n\r\ninterface CardItemStateProps {\r\n    isLoading: boolean;\r\n    error: string;\r\n    product: Product;\r\n}\r\n\r\ninterface CardItemDispatchProps {\r\n    getItem: (type: AsyncActionType, url: string) => Promise<void>;\r\n}","import { FC } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport { Header } from \"../components/Header\";\r\nimport CardItem from \"../components/CardItem\";\r\nimport { RouteParams } from \"../App\";\r\n\r\nexport const Card: FC = () => {\r\n    let { name } = useParams<RouteParams>();\r\n    \r\n    return (\r\n        <>\r\n            <Header title=\"Product info:\" subtitle={name} />\r\n            <CardItem />\r\n        </>\r\n    );\r\n}","import { FC } from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { List } from \"./screens/List\";\nimport { Card } from \"./screens/Card\";\n\nconst App: FC = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <List />\n                </Route>\n                <Route path=\"/products/:id/:name\">\n                    <Card />\n                </Route>\n            </Switch>\n        </Router>\n    );\n}\n\nexport default App;\n\n\nexport interface RouteParams {\n    id: string;\n    name?: string;\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Reducer } from \"redux\";\r\nimport { SortOptions } from \"../components/SortBy\";\r\n\r\nimport { ActionTypes, KnownActions } from \"../types/ActionTypes\";\r\nimport { Product } from \"../types/BaseItem\";\r\nimport { AppState } from \"./store\";\r\n\r\nconst initialState: AppState = {\r\n    isLoading: false,\r\n    error: \"\",\r\n    sortBy: SortOptions.AZ_ASC,\r\n    products: [],\r\n    product: {\r\n        id: \"\",\r\n        imageUrl: \"\",\r\n        name: \"\",\r\n        count: 0,\r\n    },\r\n};\r\n\r\nexport const productsReducer: Reducer<AppState, KnownActions> =\r\n(state = initialState, action): AppState => {\r\n    const { type, payload } = action;\r\n\r\n    switch (type) {\r\n        case ActionTypes.LOADING:\r\n            return {\r\n                ...state,\r\n                isLoading: payload as boolean,\r\n                error: \"\",\r\n            };\r\n        case ActionTypes.ERROR:\r\n            return {\r\n                ...state,\r\n                error: payload as string,\r\n            };\r\n        case ActionTypes.SORT_BY:\r\n            return {\r\n                ...state,\r\n                sortBy: payload as SortOptions,\r\n            };\r\n        case ActionTypes.GET_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products: payload as Product[],\r\n            };\r\n        case ActionTypes.GET_PRODUCT:\r\n            return {\r\n                ...state,\r\n                product: (payload as Product[])[0],\r\n            };\r\n        case ActionTypes.ADD_PRODUCT:\r\n            return {\r\n                ...state,\r\n                products: [\r\n                    ...state.products,\r\n                    (payload as Product)\r\n                ],\r\n            };\r\n        case ActionTypes.UPDATE_PRODUCT:\r\n            return {\r\n                ...state,\r\n                products: state.products.map(p =>\r\n                    p.id === (payload as Product).id\r\n                        ? p = (payload as Product)\r\n                        : p\r\n                ),\r\n                product: (payload as Product),\r\n            };\r\n        case ActionTypes.REMOVE_PRODUCT:\r\n            return {\r\n                ...state,\r\n                products: state.products.filter(p =>\r\n                    p.id !== payload as string\r\n                ),\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk, { ThunkDispatch } from \"redux-thunk\";\r\n\r\nimport { productsReducer } from \"./reducer\";\r\nimport { KnownActions } from \"../types/ActionTypes\";\r\nimport { Product } from \"../types/BaseItem\";\r\nimport { SortOptions } from \"../components/SortBy\";\r\n\r\nexport const store = createStore(productsReducer, applyMiddleware<AppDispatch, any>(thunk));\r\n\r\n\r\nexport interface AppState {\r\n    isLoading: boolean;\r\n    error: string;\r\n    products: Product[];\r\n    product: Product;\r\n    sortBy: SortOptions;\r\n}\r\n\r\nexport type AppDispatch = ThunkDispatch<AppState, any, KnownActions>;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <React.StrictMode>\n            <App />\n        </React.StrictMode>\n    </Provider>\n    , document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}